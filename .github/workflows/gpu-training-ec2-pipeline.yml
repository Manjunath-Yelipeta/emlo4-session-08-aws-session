name: CML-EC2-Runner-GPU
on: 
  workflow_dispatch:

jobs:
  build-and-push-ecr-image:
    name: Build and push ECR image
    runs-on: ubuntu-latest
    outputs:
      commit_id: ${{ steps.get_commit_id.outputs.commit_id }}
      image_uri: ${{ steps.build-image.outputs.image_uri }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}


      - name: Login to Amazon ECR Public
        id: login-ecr-public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Get latest commit ID
        id: get_commit_id
        run: |
          latest_commit=$(git rev-parse HEAD)
          echo "commit_id=$latest_commit" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR Public
        id: build-image
        env:
          ECR_REGISTRY: public.ecr.aws
          ECR_NAMESPACE: y6b4w2a2
          ECR_REPOSITORY: aws-session/aws-session-ecr
          IMAGE_TAG: ${{ steps.get_commit_id.outputs.commit_id }}
        run: |
          # Build with both latest and commit-specific tags
          FULL_IMAGE_URI=$ECR_REGISTRY/$ECR_NAMESPACE/$ECR_REPOSITORY
          docker build -t $FULL_IMAGE_URI:$IMAGE_TAG -t $FULL_IMAGE_URI:latest .
          docker push $FULL_IMAGE_URI:$IMAGE_TAG
          docker push $FULL_IMAGE_URI:latest
          echo "image_uri=$FULL_IMAGE_URI:$IMAGE_TAG" >> $GITHUB_OUTPUT

  launch-runner:
    runs-on: ubuntu-latest
    needs: build-and-push-ecr-image
    outputs:
      commit_id: ${{ steps.get_commit_id_runner.outputs.commit_id }}
    steps:
      - uses: actions/checkout@v3
      - uses: iterative/setup-cml@v2

      - name: Display the commit ID
        run: |
          echo "Latest commit ID is: ${{ needs.build-and-push-ecr-image.outputs.commit_id }}"

      - name: Get latest commit ID
        id: get_commit_id_runner
        run: |
          echo "::set-output name=commit_id::${{ needs.build-and-push-ecr-image.outputs.commit_id }}"

      - name: Deploy runner on AWS EC2 
        env:
          REPO_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cml runner launch \
          --cloud=aws \
          --name=session-08 \
          --cloud-region=ap-south-1 \
          --cloud-type=g4dn.xlarge \
          --cloud-hdd-size=64 \
          --cloud-spot \
          --single \
          --labels=cml-gpu \
          --idle-timeout=100

  train-and-report:
    runs-on: [self-hosted, cml-gpu]
    needs: [launch-runner, build-and-push-ecr-image]  # Add build-and-push-ecr-image to needs
    timeout-minutes: 20
    steps:
      - name: Configure AWS credentials
        run: |
          mkdir -p ~/.aws
          echo "[default]
          aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region=${{ secrets.AWS_REGION }}" > ~/.aws/credentials

      - name: Login to ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws

      - name: Pull and Run Training Container
        env:
          IMAGE_URI: ${{ needs.build-and-push-ecr-image.outputs.image_uri }}
        run: |
          echo "Using Image URI: ${IMAGE_URI}"
          
          mkdir -p model_storage
          echo "Pulling image..."
          docker pull ${IMAGE_URI}
          
          echo "Running container..."
          docker run --gpus=all \
            -v "$(pwd)/model_storage:/workspace/model_storage" \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }} \
            ${IMAGE_URI} \
            /bin/bash -c "
              dvc pull -r myremote && \
              mkdir -p model_storage && \
              dvc repro -f 
            "

      - name: Upload checkpoint to S3
        run: |
          if [ -f ./model_storage/best_model_checkpoint.txt ]; then
            checkpoint_file=$(head -n 1 ./model_storage/best_model_checkpoint.txt)
            bucket_name="mybucket-emlo-mumbai"
            s3_key="session-08-checkpoint/${{ needs.launch-runner.outputs.commit_id }}/$(basename "$checkpoint_file")"
            echo "Uploading $checkpoint_file to s3://$bucket_name/$s3_key"
            aws s3 cp "$checkpoint_file" "s3://$bucket_name/$s3_key"
          else
            echo "No checkpoint file found"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          docker system prune -f
